# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kdGTwiSlPixT_J77BLTKNA-cl23QgiF9
"""

pip install openai

!pip install flask-ngrok
!pip install flask
!pip install openai
!pip install requests
!pip install pyngrok



from pyngrok import ngrok

authtoken = "**"
ngrok.set_auth_token(authtoken)

public_url = ngrok.connect(5000)
print(f"ngrok URL: {public_url}")

from flask import Flask, render_template_string, request
import requests
from openai import OpenAI

# API Keys and URLs
NEWSDATA_API_KEY = '**'
MEDIASTACK_API_KEY = '**'
OPENAI_API_KEY = '**'

# initialize OpenAI 
client = OpenAI(api_key=OPENAI_API_KEY)

# create Flask application
app = Flask(__name__)

# API 
NEWSDATA_API_URL = f'https://newsdata.io/api/1/latest?apikey={NEWSDATA_API_KEY}'
MEDIASTACK_API_URL = f'http://api.mediastack.com/v1/news?access_key={MEDIASTACK_API_KEY}'

def fetch_news(api_url):
    response = requests.get(api_url, timeout=10)  
    if response.status_code == 200:
        data = response.json()
        return data.get('results', [])
    else:
        return []

def fetch_mediastack_news(api_url):
    response = requests.get(api_url, timeout=10)  
    if response.status_code == 200:
        data = response.json()
        articles = data.get('data', [])
        for article in articles:
            article['source'] = 'Mediastack'
            article['link'] = article['url']
        return articles
    else:
        return []

def categorize_business_news(articles):
    business_news = []
    for article in articles:
        category = article.get('category', '')
        if isinstance(category, list):
            if 'business' in [cat.lower() for cat in category]:
                business_news.append(article)
        elif category.lower() == 'business':
            business_news.append(article)
    return business_news

def translate_text(text, target_language='zh-cn'):
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a helpful assistant that translates English text to natural, fluent Simplified Chinese."},
                {"role": "user", "content": f"Translate the following text to Simplified Chinese: {text}"}
            ]
        )
        translation = response.choices[0].message.content.strip()
        return translation
    except Exception as e:
        return text

def translate_news(articles):
    for article in articles:
        try:
            if 'title' in article:
                article['title'] = translate_text(article['title'], 'zh')
            if 'description' in article:
                article['description'] = translate_text(article['description'], 'zh')
        except Exception as e:
            pass
    return articles

@app.route('/')
def home():
    newsdata_news = fetch_news(NEWSDATA_API_URL)
    mediastack_news = fetch_mediastack_news(MEDIASTACK_API_URL)
    all_news = newsdata_news + mediastack_news
    business_news = categorize_business_news(all_news)
    translated_news = translate_news(business_news)

    html_template = """
    <!doctype html>
    <html lang="en">
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <title>Daily News</title>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
        <style>
          body {
            background-color: #f8f9fa;
          }
          .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
          }
          .card-title {
            font-size: 1.25rem;
            font-weight: bold;
          }
          .card-text {
            color: #6c757d;
          }
          .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
          }
          .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
          }
          .container {
            padding-top: 20px;
            padding-bottom: 20px;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="jumbotron text-center">
            <h1 class="display-4">Daily News</h1>
            <p class="lead">Stay updated with the latest business news.</p>
          </div>
          <div class="row">
            {% for article in news %}
            <div class="col-md-4">
              <div class="card mb-4">
                <div class="card-body">
                  <h5 class="card-title">{{ article.title }}</h5>
                  <p class="card-text">{{ article.description }}</p>
                  <a href="{{ article.link }}" class="btn btn-primary">Read more</a>
                </div>
              </div>
            </div>
            {% endfor %}
          </div>
        </div>
        <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
      </body>
    </html>
    """
    return render_template_string(html_template, news=translated_news)

if __name__ == '__main__':
    app.run()

ngrok http 5000
